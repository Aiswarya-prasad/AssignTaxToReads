                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
colnames(qpcr_df_info)
qpcr_df_bac <- qpcr_df_info %>%
                filter(!grepl("Control", ID)) %>%
                    filter(Target.Name == "Bacteria") %>%
                        rename(Ct_Mean_bac = Ct_Mean) %>%
                        rename(Ct_SD_bac = `Ct_SD`) %>%
                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
qpcr_df_bac <- qpcr_df_info %>%
                filter(!grepl("Control", ID)) %>%
                    filter(Target.Name == "Bacteria") %>%
                        # rename(Ct_Mean_bac = Ct_Mean) %>%
                        rename(Ct_SD_bac = Ct_SD) %>%
                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
qpcr_df_bac <- qpcr_df_info %>%
                filter(!grepl("Control", ID)) %>%
                    filter(Target.Name == "Bacteria") %>%
                        mutate(Ct_Mean_bac = Ct_Mean) %>%
                        mutate(Ct_SD_bac = Ct_SD) %>%
                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
qpcr_df_host <- qpcr_df_info %>%
                filter(!grepl("Control", ID)) %>%
                    filter(Target.Name == "Host") %>%
                        # rename(Ct_Mean_host = `Ct Mean`) %>%
                        group_by(ID) %>%
                        mutate(Ct_Mean_host = mean(Ct, na.rm = T)) %>%
                        ungroup() %>%
                        rename(Ct_SD_host = `Ct SD`) %>%
                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
qpcr_df_host <- qpcr_df_info %>%
                filter(!grepl("Control", ID)) %>%
                    filter(Target.Name == "Host") %>%
                        # rename(Ct_Mean_host = `Ct Mean`) %>%
                        group_by(ID) %>%
                        mutate(Ct_Mean_host = mean(Ct, na.rm = T)) %>%
                        ungroup() %>%
                        rename(Ct_SD_host = Ct_SD) %>%
                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
qpcr_df_host <- qpcr_df_info %>%
                filter(!grepl("Control", ID)) %>%
                    filter(Target.Name == "Host") %>%
                        # rename(Ct_Mean_host = `Ct Mean`) %>%
                        group_by(ID) %>%
                        mutate(Ct_Mean_host = mean(Ct, na.rm = T)) %>%
                        ungroup() %>%
                        mutate(Ct_SD_host = Ct_SD) %>%
                        select(!c(Well, Sample.Name, Target.Name, Ct)) %>%
                        unique()
library(tidyverse)
library(ggplot2)
library(readxl)
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(ggthemes)
library(RColorBrewer)
library(scales)
library(dplyr)
library(vegan)
library(ape)
library(ComplexHeatmap)
library(ggnewscale)
library(ggsignif)
library(plotly)
library(htmlwidgets)
library(dada2)
library(phyloseq)
library(DECIPHER)
source("../05_qPCRs/qPCR_parse.R")
make_theme <- function(theme_name=theme_classic() ,max_colors=0, palettefill="Pastel1", palettecolor="Dark2", modify_guide = T,
                        setFill=TRUE, setCol=TRUE,
                        guide_nrow=2, guide_nrow_byrow=TRUE, leg_pos="top", leg_size=12,
                        axis_x_title = 12, axis_y_title = 12,
                        x_angle=0 ,x_vj=0, x_hj=0, x_size=12,
                        y_angle=0 ,y_vj=0, y_hj=0, y_size=12){
  n_11 = c("BrBG", "PiYG", "PRGn", "PuOr", "RdBu", "RdGy", "RdYlBu", "RdYlGn", "Spectral")
  n_12 = c("Paired", "Set3")
  n_8 = c("Accent", "Dark2", "Pastel2", "Set2")
  if (palettefill %in% n_12) {
    n_f = 12
  } else {
    if (palettefill %in% n_11) {
      n_f = 11
    } else {
      if (palettefill %in% n_8) {
        n_f  = 8
      } else {
        n_f = 9
      }
    }
  }
  if (palettecolor %in% n_12) {
    n_c = 12
  } else {
    if (palettecolor %in% n_11) {
      n_c = 11
    } else {
      if (palettecolor %in% n_8) {
        n_c  = 8
      } else {
        n_c = 9
      }
    }
  }
  getFill = colorRampPalette(brewer.pal(n_f, palettefill))
  getColor = colorRampPalette(brewer.pal(n_c, palettecolor))
  theme_params <- theme(axis.text.x = element_text(angle = x_angle,
    vjust = x_vj, hjust=x_hj,
    size = x_size),
    axis.text.y = element_text(angle = y_angle,
      vjust = y_vj, hjust=y_hj,
      size = y_size),
      axis.title.x = element_text(size=axis_x_title),
      axis.title.y = element_text(size=axis_y_title),
      legend.position=leg_pos,
      legend.text = element_text(size=leg_size)
    )
  if (modify_guide == T) {
    guide_params <- guides(fill = guide_legend(
                                    nrow=guide_nrow,
                                    byrow=guide_nrow_byrow
                                  ),
                          col = guide_legend(
                                    nrow=guide_nrow,
                                    byrow=guide_nrow_byrow
                                  )
                    )
  my_theme <- list(
                theme_name,
                theme_params,
                guide_params
              )
  } else {
    my_theme <- list(
                  theme_name,
                  theme_params
                )
  }
  if(setFill) {
    if (n_f < max_colors) {
      my_theme <- list(
                    my_theme,
                    scale_fill_manual(values = getFill(max_colors), na.value="grey")
                  )
    } else {
      my_theme <- list(
                    my_theme,
                    scale_fill_brewer(palette=palettefill, na.value="grey")
                  )
    }
  }
  if(setCol) {
    if (n_c < max_colors) {
      my_theme <- list(
                    my_theme,
                    scale_color_manual(values = getColor(max_colors), na.value="grey")
                  )
    } else {
      my_theme <- list(
                    my_theme,
                    scale_color_brewer(palette=palettecolor, na.value="grey")
                  )
    }
  }
  return(my_theme)
}
remove_extension <- function(x, extension) {
  strsplit(x, extension)[[1]][[1]]
}
working_dir <- "/home/aiswarya/mnt/nas_recherche/spirit/D2c/aprasad/20220921_aprasad_PriorityEffectsExperimentPilot/03_PilotExperiment/07_PacBIO_sequencing"
setwd(working_dir)
metadata_path <- "../06_PCR_PacBio/PCR_plan.xlsx"
# metadata_path <- "230313_metadata.xlsx"
df_meta_pilot <- read_excel(metadata_path, sheet = 1)
write.csv(df_meta, file = "230313_metadata.csv", append = F, quote = F, row.names = F)
treatment_order <- c("AB-0", "A-0", "A-3", "A-3_14", "B-0", "B-3", "B-3_14", "AB-1", "BA-1", "AB-3", "BA-3", "0-3", "alq-A", "alq-AB", "alq-B", "alq-SW")
treatment_order_color <- list("AB-0" = "#6a3d9a", 
                        "A-0" = "#1f78b4", "A-3" = "#ff7f00", "A-3_14" = "#ff9f00",
                        "B-0" = "#a6cee3", "B-3" = "#fdbf6f", "B-3_14" = "#ffdf6f",
                        "AB-1" = "#33a02c", "BA-1" = "#b2df8a",
                        "AB-3" = "#e31a1c", "BA-3" = "#fb9a99",
                        "0-3" = "#cab2d6",
                        "alq-A" = "#ff7f00", "alq-AB" = "#6a3d9a", "alq-B" = "#fdbf6f", 
                        "alq-SW" = "#cab2d6"
                        )
# arranged such that they are in treatment order (in excel)
ID_order <- c("2-1", "2-13", "3-1", "3-13", "1-1",
              "1-4", "2-4", "2-16", "3-4", "3-16",
              "1-8", "2-8", "2-20", "3-8", "3-20",
              "1-11", "1-23", "2-11", "2-23", "3-11",
              "1-5", "2-5", "2-17", "3-5", "3-17", "1-9",
              "2-9", "2-21", "3-9", "1-12", "1-24", "2-12",
              "2-24", "3-12", "1-2", "2-2", "2-14",
              "3-2", "3-14", "1-3", "2-3", "2-15", "3-3",
              "3-15", "1-6", "2-6", "2-18", "3-6",
              "3-18", "1-7", "2-7", "2-19", "3-7", "3-19",
              "1-10", "2-10", "2-22", "3-10", "3-21",
              "3-22", "1-13", "1-14", "1-15", "1-19",
              "1-16","1-17", "1-18", "1-20", "1-21", "1-22"
              )
ID_order_ext <- c("2-1", "2-13", "3-1", "3-13", "1-1",
              "1-4", "2-4", "2-16", "3-4", "3-16",
              "1-8", "2-8", "2-20", "3-8", "3-20",
              "1-11", "1-23", "2-11", "2-23", "3-11",
              "1-5", "2-5", "2-17", "3-5", "3-17", "1-9",
              "2-9", "2-21", "3-9", "1-12", "1-24", "2-12",
              "2-24", "3-12", "1-2", "2-2", "2-14",
              "3-2", "3-14", "1-3", "2-3", "2-15", "3-3",
              "3-15", "1-6", "2-6", "2-18", "3-6",
              "3-18", "1-7", "2-7", "2-19", "3-7", "3-19",
              "1-10", "2-10", "2-22", "3-10", "3-21",
              "3-22", "1-13", "1-14", "1-15", "1-19",
              "1-16","1-17", "1-18", "1-20", "1-21", "1-22",
              "M6-5", "C8-2", "D7-4", "F4-3", "A4-3",
              "SC", "NC2-1", "NC2SC", "LW-1"
              )
# samples_MY <- c("M", "C", "D", "F", "A")
source("../05_qPCRs/qPCR_parse.R")
library(tidyverse)
library(ggplot2)
library(readxl)
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(ggthemes)
library(RColorBrewer)
library(scales)
library(dplyr)
library(vegan)
library(ape)
library(ComplexHeatmap)
library(ggnewscale)
library(ggsignif)
library(plotly)
library(htmlwidgets)
library(dada2)
library(phyloseq)
library(DECIPHER)
source("../05_qPCRs/qPCR_parse.R")
make_theme <- function(theme_name=theme_classic() ,max_colors=0, palettefill="Pastel1", palettecolor="Dark2", modify_guide = T,
                        setFill=TRUE, setCol=TRUE,
                        guide_nrow=2, guide_nrow_byrow=TRUE, leg_pos="top", leg_size=12,
                        axis_x_title = 12, axis_y_title = 12,
                        x_angle=0 ,x_vj=0, x_hj=0, x_size=12,
                        y_angle=0 ,y_vj=0, y_hj=0, y_size=12){
  n_11 = c("BrBG", "PiYG", "PRGn", "PuOr", "RdBu", "RdGy", "RdYlBu", "RdYlGn", "Spectral")
  n_12 = c("Paired", "Set3")
  n_8 = c("Accent", "Dark2", "Pastel2", "Set2")
  if (palettefill %in% n_12) {
    n_f = 12
  } else {
    if (palettefill %in% n_11) {
      n_f = 11
    } else {
      if (palettefill %in% n_8) {
        n_f  = 8
      } else {
        n_f = 9
      }
    }
  }
  if (palettecolor %in% n_12) {
    n_c = 12
  } else {
    if (palettecolor %in% n_11) {
      n_c = 11
    } else {
      if (palettecolor %in% n_8) {
        n_c  = 8
      } else {
        n_c = 9
      }
    }
  }
  getFill = colorRampPalette(brewer.pal(n_f, palettefill))
  getColor = colorRampPalette(brewer.pal(n_c, palettecolor))
  theme_params <- theme(axis.text.x = element_text(angle = x_angle,
    vjust = x_vj, hjust=x_hj,
    size = x_size),
    axis.text.y = element_text(angle = y_angle,
      vjust = y_vj, hjust=y_hj,
      size = y_size),
      axis.title.x = element_text(size=axis_x_title),
      axis.title.y = element_text(size=axis_y_title),
      legend.position=leg_pos,
      legend.text = element_text(size=leg_size)
    )
  if (modify_guide == T) {
    guide_params <- guides(fill = guide_legend(
                                    nrow=guide_nrow,
                                    byrow=guide_nrow_byrow
                                  ),
                          col = guide_legend(
                                    nrow=guide_nrow,
                                    byrow=guide_nrow_byrow
                                  )
                    )
  my_theme <- list(
                theme_name,
                theme_params,
                guide_params
              )
  } else {
    my_theme <- list(
                  theme_name,
                  theme_params
                )
  }
  if(setFill) {
    if (n_f < max_colors) {
      my_theme <- list(
                    my_theme,
                    scale_fill_manual(values = getFill(max_colors), na.value="grey")
                  )
    } else {
      my_theme <- list(
                    my_theme,
                    scale_fill_brewer(palette=palettefill, na.value="grey")
                  )
    }
  }
  if(setCol) {
    if (n_c < max_colors) {
      my_theme <- list(
                    my_theme,
                    scale_color_manual(values = getColor(max_colors), na.value="grey")
                  )
    } else {
      my_theme <- list(
                    my_theme,
                    scale_color_brewer(palette=palettecolor, na.value="grey")
                  )
    }
  }
  return(my_theme)
}
remove_extension <- function(x, extension) {
  strsplit(x, extension)[[1]][[1]]
}
working_dir <- "/home/aiswarya/mnt/nas_recherche/spirit/D2c/aprasad/20220921_aprasad_PriorityEffectsExperimentPilot/03_PilotExperiment/07_PacBIO_sequencing"
setwd(working_dir)
metadata_path <- "../06_PCR_PacBio/PCR_plan.xlsx"
# metadata_path <- "230313_metadata.xlsx"
df_meta_pilot <- read_excel(metadata_path, sheet = 1)
write.csv(df_meta, file = "230313_metadata.csv", append = F, quote = F, row.names = F)
treatment_order <- c("AB-0", "A-0", "A-3", "A-3_14", "B-0", "B-3", "B-3_14", "AB-1", "BA-1", "AB-3", "BA-3", "0-3", "alq-A", "alq-AB", "alq-B", "alq-SW")
treatment_order_color <- list("AB-0" = "#6a3d9a", 
                        "A-0" = "#1f78b4", "A-3" = "#ff7f00", "A-3_14" = "#ff9f00",
                        "B-0" = "#a6cee3", "B-3" = "#fdbf6f", "B-3_14" = "#ffdf6f",
                        "AB-1" = "#33a02c", "BA-1" = "#b2df8a",
                        "AB-3" = "#e31a1c", "BA-3" = "#fb9a99",
                        "0-3" = "#cab2d6",
                        "alq-A" = "#ff7f00", "alq-AB" = "#6a3d9a", "alq-B" = "#fdbf6f", 
                        "alq-SW" = "#cab2d6"
                        )
# arranged such that they are in treatment order (in excel)
ID_order <- c("2-1", "2-13", "3-1", "3-13", "1-1",
              "1-4", "2-4", "2-16", "3-4", "3-16",
              "1-8", "2-8", "2-20", "3-8", "3-20",
              "1-11", "1-23", "2-11", "2-23", "3-11",
              "1-5", "2-5", "2-17", "3-5", "3-17", "1-9",
              "2-9", "2-21", "3-9", "1-12", "1-24", "2-12",
              "2-24", "3-12", "1-2", "2-2", "2-14",
              "3-2", "3-14", "1-3", "2-3", "2-15", "3-3",
              "3-15", "1-6", "2-6", "2-18", "3-6",
              "3-18", "1-7", "2-7", "2-19", "3-7", "3-19",
              "1-10", "2-10", "2-22", "3-10", "3-21",
              "3-22", "1-13", "1-14", "1-15", "1-19",
              "1-16","1-17", "1-18", "1-20", "1-21", "1-22"
              )
ID_order_ext <- c("2-1", "2-13", "3-1", "3-13", "1-1",
              "1-4", "2-4", "2-16", "3-4", "3-16",
              "1-8", "2-8", "2-20", "3-8", "3-20",
              "1-11", "1-23", "2-11", "2-23", "3-11",
              "1-5", "2-5", "2-17", "3-5", "3-17", "1-9",
              "2-9", "2-21", "3-9", "1-12", "1-24", "2-12",
              "2-24", "3-12", "1-2", "2-2", "2-14",
              "3-2", "3-14", "1-3", "2-3", "2-15", "3-3",
              "3-15", "1-6", "2-6", "2-18", "3-6",
              "3-18", "1-7", "2-7", "2-19", "3-7", "3-19",
              "1-10", "2-10", "2-22", "3-10", "3-21",
              "3-22", "1-13", "1-14", "1-15", "1-19",
              "1-16","1-17", "1-18", "1-20", "1-21", "1-22",
              "M6-5", "C8-2", "D7-4", "F4-3", "A4-3",
              "SC", "NC2-1", "NC2SC", "LW-1"
              )
# samples_MY <- c("M", "C", "D", "F", "A")
ggplot() +
  geom_point(data = combined_df,
             aes(y = factor(ID, ID_order),
                 x = bac_copies_norm,
                 color = factor(Treatment, treatment_order),
                 shape = Sample_type
         ), size = 3, stat = "identity"
         ) +
  labs(y = "Sample ID", x = "Bacterial copynumber (Normalized)", color = "Treatment") +
  scale_color_manual(values=treatment_order_color) +
    scale_x_continuous(trans = "log10", labels = function(x) parse(text=paste("10^",round(log10(x), 2)))) +
    # scale_y_log10(minor_breaks = unique(as.numeric(1:10 %o% 10 ^ (0:3)))) +
    geom_hline(yintercept = LOD) +
    make_theme(setCol = F, setFill = F, palettecolor = "Pastel1",
               x_axis_lab_size = 18,
               y_axis_lab_size = 18, guide_nrow = 3,
               y_size = 10,
               x_size = 18)
ggsave("Figures/qPCR_copy_numbers.pdf")
ggplot() +
  geom_point(data = combined_df,
             aes(y = factor(ID, ID_order),
                 x = bac_copies_norm,
                 color = factor(Treatment, treatment_order),
                 shape = Sample_type
         ), size = 3, stat = "identity"
         ) +
  labs(y = "Sample ID", x = "Bacterial copynumber (Normalized)", color = "Treatment") +
  scale_color_manual(values=treatment_order_color) +
    scale_x_continuous(trans = "log10", labels = function(x) parse(text=paste("10^",round(log10(x), 2)))) +
    # scale_y_log10(minor_breaks = unique(as.numeric(1:10 %o% 10 ^ (0:3)))) +
    geom_hline(yintercept = LOD) +
    make_theme(setCol = F, setFill = F, palettecolor = "Pastel1",
               x_axis_lab_size = 18,
               y_axis_lab_size = 18, guide_nrow = 3,
               y_size = 10,
               x_size = 18)
ggplot() +
  geom_point(data = combined_df,
             aes(y = factor(ID, ID_order),
                 x = bac_copies_norm,
                 color = factor(Treatment, treatment_order),
                 shape = Sample_type
         ), size = 3, stat = "identity"
         ) +
  labs(y = "Sample ID", x = "Bacterial copynumber (Normalized)", color = "Treatment") +
  scale_color_manual(values=treatment_order_color) +
    scale_x_continuous(trans = "log10", labels = function(x) parse(text=paste("10^",round(log10(x), 2)))) +
    # scale_y_log10(minor_breaks = unique(as.numeric(1:10 %o% 10 ^ (0:3)))) +
    geom_hline(yintercept = LOD) +
    make_theme(setCol = F, setFill = F, palettecolor = "Pastel1",
               axis_x_title = 18,
               axis_y_title = 18, guide_nrow = 3,
               y_size = 10,
               x_size = 18)
ggsave("Figures/qPCR_copy_numbers.pdf")
ggplot() +
  geom_point(data = combined_df,
             aes(y = factor(ID, ID_order),
                 x = bac_copies_norm,
                 color = factor(Treatment, treatment_order),
                 shape = Sample_type
         ), size = 3, stat = "identity"
         ) +
  labs(y = "Sample ID", x = "Bacterial copynumber (Normalized)", color = "Treatment") +
  scale_color_manual(values=treatment_order_color) +
    scale_x_continuous(trans = "log10", labels = function(x) parse(text=paste("10^",round(log10(x), 2)))) +
    # scale_y_log10(minor_breaks = unique(as.numeric(1:10 %o% 10 ^ (0:3)))) +
    geom_hline(yintercept = LOD) +
    make_theme(setCol = F, setFill = F, palettecolor = "Pastel1",
               axis_x_title = 18,
               axis_y_title = 18, guide_nrow = 3,
               y_size = 10,
               x_size = 18)
dev.off()
ggplot() +
  geom_point(data = combined_df,
             aes(y = factor(ID, ID_order),
                 x = bac_copies_norm,
                 color = factor(Treatment, treatment_order),
                 shape = Sample_type
         ), size = 3, stat = "identity"
         ) +
  labs(y = "Sample ID", x = "Bacterial copynumber (Normalized)", color = "Treatment") +
  scale_color_manual(values=treatment_order_color) +
    scale_x_continuous(trans = "log10", labels = function(x) parse(text=paste("10^",round(log10(x), 2)))) +
    # scale_y_log10(minor_breaks = unique(as.numeric(1:10 %o% 10 ^ (0:3)))) +
    geom_hline(yintercept = LOD) +
    make_theme(setCol = F, setFill = F, palettecolor = "Pastel1",
               axis_x_title = 18,
               axis_y_title = 18, guide_nrow = 3,
               y_size = 10,
               x_size = 18)
dev.off()
ggplot() +
  geom_point(data = combined_df,
             aes(y = factor(ID, ID_order),
                 x = bac_copies_norm,
                 color = factor(Treatment, treatment_order),
                 shape = Sample_type
         ), size = 3, stat = "identity"
         ) +
  labs(y = "Sample ID", x = "Bacterial copynumber (Normalized)", color = "Treatment") +
  scale_color_manual(values=treatment_order_color) +
    scale_x_continuous(trans = "log10", labels = function(x) parse(text=paste("10^",round(log10(x), 2)))) +
    # scale_y_log10(minor_breaks = unique(as.numeric(1:10 %o% 10 ^ (0:3)))) +
    geom_hline(yintercept = LOD) +
    make_theme(setCol = F, setFill = F, palettecolor = "Pastel1",
               axis_x_title = 18,
               axis_y_title = 18, guide_nrow = 3,
               y_size = 10,
               x_size = 18)
.vsc.attach()
.vsc.attach()
.vsc.attach()
.vsc.attach()
.vsc.attach()
.vsc.attach()
y
